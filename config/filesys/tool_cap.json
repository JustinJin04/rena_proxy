{
  "tool_capabilities": {
    "read_file": {
      "description of the tool": "Deprecated single-file text reader (kept for backward compatibility). Returns file contents as text with optional head/tail line limits. Prefer read_text_file for robust encoding handling and clearer errors. Only operates inside allowed root directories returned by list_allowed_directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: path to the file. Must be inside an allowed root (e.g. /workspace/...). Accepts absolute paths under an allowed root or relative paths resolved inside an allowed root.",
        "head (number) [optional]: return only the first N lines of the file.",
        "tail (number) [optional]: return only the last N lines of the file."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "list_directory",
        "get_file_info",
        "read_multiple_files",
        "read_text_file"
      ],
      "what kinds of queries are best for this tool": [
        "Quickly read the full text of a small file when legacy code expects read_file.",
        "Preview the first/last N lines of a file using head/tail (legacy workflows)."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Reading binary media with base64/MIME metadata (use read_media_file).",
        "Robust encoding detection and detailed error messages (use read_text_file).",
        "Accessing files outside allowed root directories (calls will return access-denied)."
      ],
      "what are the outputs of this tool": [
        "Plain text string containing the file contents, or an error explanation.",
        "When head/tail provided, returns only the requested lines."
      ],
      "which tools to call if this tool is not successful": [
        "read_text_file (better single-file reader with encoding detection)",
        "list_allowed_directories (confirm permitted roots)",
        "get_file_info (diagnose presence/permissions)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "read_text_file"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Prefer read_text_file for new calls. Use read_file only for legacy compatibility."
      ]
    },
    "read_text_file": {
      "description of the tool": "Primary single-file text reader. Handles common encodings, returns helpful errors, and supports head/tail previews. Use to examine a single text file. Only reads files inside allowed root directories (check list_allowed_directories first).",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: file path to read. Use an absolute path under an allowed root (e.g. /workspace/path/to/file) or a relative path resolved inside an allowed root.",
        "head (number) [optional]: return only the first N lines.",
        "tail (number) [optional]: return only the last N lines."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "list_directory",
        "get_file_info",
        "read_multiple_files",
        "search_files"
      ],
      "what kinds of queries are best for this tool": [
        "Examine the content of a single text file (configs, source, logs, docs).",
        "Preview top or bottom of large logs with head/tail.",
        "Get file content with encoding detection and detailed errors."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Reading images/audio with MIME/base64 info (use read_media_file).",
        "Efficiently reading many files at once (use read_multiple_files).",
        "Accessing outside allowed roots (will return access denied)."
      ],
      "what are the outputs of this tool": [
        "File content as text (string) or a detailed error message/object.",
        "If head/tail provided, returns only the requested partial content."
      ],
      "which tools to call if this tool is not successful": [
        "list_allowed_directories (confirm permitted roots)",
        "get_file_info (diagnose missing file or permissions)",
        "read_media_file (if the target is binary/media)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "read_file (deprecated)",
        "read_multiple_files (for batching multiple reads)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use read_multiple_files when you need several files returned in one response. Use read_media_file for non-text files."
      ]
    },
    "read_multiple_files": {
      "description of the tool": "Batch reader for multiple files in a single call. Returns per-path results with content or per-file errors. Efficient when you need several text files at once. Only works inside allowed roots.",
      "what is a description of the arguments of the tool": [
        "paths (array[string]) [required]: list of file paths to read. Each path must be within an allowed root. Prefer absolute allowed-root paths like /workspace/..., or relative paths resolved under an allowed root."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "search_files",
        "read_text_file",
        "get_file_info",
        "create_directory"
      ],
      "what kinds of queries are best for this tool": [
        "Fetching multiple related text files at once (batch retrieval).",
        "Collecting many small config/source files for analysis or packaging.",
        "Tolerating some missing files (per-file errors reported without stopping)."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Listing directory contents (use list_directory or directory_tree).",
        "Reading binary media with MIME/base64 info (use read_media_file).",
        "Accessing files outside allowed roots."
      ],
      "what are the outputs of this tool": [
        "Array of results where each entry includes the path and either content (string) or an error message for that path."
      ],
      "which tools to call if this tool is not successful": [
        "read_text_file (inspect a single file with better errors)",
        "list_allowed_directories (confirm permitted roots)",
        "search_files (locate files if paths are wrong)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "read_text_file (single-file)",
        "read_media_file (for media files)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use read_multiple_files when you need many files returned in one response. Use read_text_file for one-off reads with more detailed single-file error reporting."
      ]
    },
    "write_file": {
      "description of the tool": "Create a new file or completely overwrite an existing file with provided content. Overwrites without confirmation. Only works inside allowed root directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: destination path for the file. Must be inside an allowed root (prefer absolute path under an allowed root, e.g. /workspace/...).",
        "content (string) [required]: textual content to write to the file."
      ],
      "which other tools are commonly used with this tool": [
        "create_directory",
        "list_allowed_directories",
        "get_file_info",
        "read_text_file",
        "edit_file"
      ],
      "what kinds of queries are best for this tool": [
        "Creating a new file under the allowed workspace.",
        "Overwriting an existing file when a full replacement is intended.",
        "Saving generated textual outputs to /workspace."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Performing targeted line-based edits with a preview (use edit_file with dryRun).",
        "Writing files outside allowed roots.",
        "Writing binary media with MIME metadata (use read_media_file for reading binaries; writing binaries isn't supported here)."
      ],
      "what are the outputs of this tool": [
        "Success confirmation (path written) or an error explaining the cause (permission denied, outside allowed roots, etc.)."
      ],
      "which tools to call if this tool is not successful": [
        "list_allowed_directories (confirm permitted roots)",
        "create_directory (if parent directories missing)",
        "get_file_info (inspect permission issues)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "edit_file (for targeted edits and diff previews)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use edit_file when you want precise, small replacements and a diff preview. Use write_file when creating or fully replacing a file."
      ]
    },
    "edit_file": {
      "description of the tool": "Make precise line or block replacements in a text file. Each edit replaces an exact oldText sequence with newText. Supports dryRun to preview as a git-style diff. Only works inside allowed root directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: path to the file to edit (must be inside an allowed root).",
        "edits (array of {oldText, newText}) [required]: list of literal replacements. oldText must match exactly somewhere in the file (literal match, not regex).",
        "dryRun (boolean) [optional]: if true, preview changes as a git-style diff and do not write the file (default: false)."
      ],
      "which other tools are commonly used with this tool": [
        "read_text_file",
        "get_file_info",
        "list_directory",
        "list_allowed_directories"
      ],
      "what kinds of queries are best for this tool": [
        "Precise replacements of known lines or blocks in a text file.",
        "Previewing edits as a git-style diff before applying (dryRun).",
        "Automated small transformations where exact matches are available."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Search-and-replace using regex or fuzzy matching (oldText is literal and must match exactly).",
        "Editing binary files.",
        "Creating entirely new files from scratch (use write_file)."
      ],
      "what are the outputs of this tool": [
        "If dryRun: a git-style diff showing proposed changes.",
        "If applied: a git-style diff plus success confirmation, or an error if oldText did not match (no changes made)."
      ],
      "which tools to call if this tool is not successful": [
        "read_text_file (inspect current content to craft correct oldText)",
        "write_file (replace the whole file if edits can't be matched)",
        "list_allowed_directories (if access denied)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "write_file"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use write_file when replacing the whole file is acceptable. Use edit_file to make targeted, line-level changes and to get a diff preview before applying."
      ]
    },
    "create_directory": {
      "description of the tool": "Create a directory (including nested parents) or ensure it exists. Succeeds silently if the directory already exists. Only works inside allowed root directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: directory path to create. Prefer an absolute path under an allowed root (e.g. /workspace/newdir)."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "write_file",
        "list_directory",
        "get_file_info"
      ],
      "what kinds of queries are best for this tool": [
        "Ensure parent directories exist before writing files.",
        "Create nested project folder structures under the permitted root."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Creating directories outside allowed roots.",
        "Listing or reading files (use list_directory or read_text_file)."
      ],
      "what are the outputs of this tool": [
        "Success confirmation (path created or already exists) or an error explaining why (outside allowed root, permission)."
      ],
      "which tools to call if this tool is not successful": [
        "list_allowed_directories (confirm permitted roots)",
        "get_file_info (to check permission issues)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "move_file (for renames/moves; not a substitute for create)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Prefer create_directory to explicitly create directories. Use move_file for renames/moves between existing locations."
      ]
    },
    "list_directory": {
      "description of the tool": "List files and directories at a specified path. Output marks entries with [FILE] or [DIR]. Good for quick top-level inspections. Only works inside allowed root directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: directory path to list (must be inside an allowed root)."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "search_files",
        "list_directory_with_sizes",
        "directory_tree",
        "get_file_info"
      ],
      "what kinds of queries are best for this tool": [
        "Quick inspection of top-level directory contents (names only).",
        "Verify whether a specific file or subdirectory exists at a path."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Returning file sizes (use list_directory_with_sizes).",
        "Recursively returning a nested JSON tree (use directory_tree)."
      ],
      "what are the outputs of this tool": [
        "Human-readable list with [FILE] and [DIR] prefixes, or an error if path invalid or outside allowed roots."
      ],
      "which tools to call if this tool is not successful": [
        "list_allowed_directories",
        "get_file_info"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "list_directory_with_sizes",
        "directory_tree"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use list_directory_with_sizes when you need file sizes. Use directory_tree for a recursive structured view."
      ]
    },
    "list_directory_with_sizes": {
      "description of the tool": "List files and directories at a path with per-item sizes and a combined summary. Supports sorting by name or size. Useful for disk-usage inspection. Only works inside allowed roots.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: directory path to inspect (must be inside an allowed root).",
        "sortBy (string) [optional]: 'name' (default) or 'size' to control sort order."
      ],
      "which other tools are commonly used with this tool": [
        "get_file_info",
        "list_directory",
        "search_files",
        "list_allowed_directories"
      ],
      "what kinds of queries are best for this tool": [
        "Analyzing disk usage in a directory.",
        "Finding the largest files in a directory (use sortBy: 'size').",
        "Producing quick overviews of top-level files with sizes and a combined total."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Recursively returning a nested JSON tree with sizes for every node (use directory_tree + get_file_info).",
        "Reading file contents (use read_text_file/read_multiple_files)."
      ],
      "what are the outputs of this tool": [
        "Formatted listing with names, [FILE]/[DIR] markers, sizes, and a summary count/combined size; or an error if the path is invalid/outside allowed roots."
      ],
      "which tools to call if this tool is not successful": [
        "list_directory (to check existence without sizes)",
        "get_file_info (to inspect a particular item)",
        "list_allowed_directories"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "list_directory",
        "directory_tree (for recursion)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use list_directory when sizes are not required. Use directory_tree when you need recursive structure rather than a flat listing."
      ]
    },
    "directory_tree": {
      "description of the tool": "Return a recursive directory tree as a JSON structure. Each node includes 'name', 'type' ('file' or 'directory'), and 'children' for directories. Pretty-printed with 2-space indentation. Only works inside allowed roots.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: root path to produce the tree for (must be inside an allowed root). Use an absolute allowed-root path like /workspace/docs."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "list_directory",
        "search_files",
        "get_file_info"
      ],
      "what kinds of queries are best for this tool": [
        "Producing a structured, recursive view of a project or folder tree.",
        "Finding nested files and directories programmatically or exporting the structure as JSON."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Returning detailed per-file metadata like size/permissions (use get_file_info or list_directory_with_sizes).",
        "Reading file contents (use read_text_file)."
      ],
      "what are the outputs of this tool": [
        "JSON structure representing the recursive tree (array/object) with 2-space indentation, or an error if the path is invalid or access is denied."
      ],
      "which tools to call if this tool is not successful": [
        "list_directory (for single-directory inspection)",
        "list_allowed_directories"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "search_files",
        "list_directory_with_sizes"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use search_files for targeted name-based lookups rather than dumping the whole tree. Use list_directory_with_sizes when you need sizes for top-level items."
      ]
    },
    "move_file": {
      "description of the tool": "Move or rename files and directories within allowed roots. Fails if the destination already exists. Both source and destination must be within allowed roots.",
      "what is a description of the arguments of the tool": [
        "source (string) [required]: existing path to move (must be in an allowed root).",
        "destination (string) [required]: new path to create (must be in an allowed root and must not already exist)."
      ],
      "which other tools are commonly used with this tool": [
        "list_directory",
        "get_file_info",
        "list_allowed_directories",
        "create_directory"
      ],
      "what kinds of queries are best for this tool": [
        "Renaming or moving files/directories within the allowed workspace.",
        "Reorganizing files without changing their contents."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Overwriting an existing destination (operation will fail).",
        "Editing/modifying file contents (use edit_file or write_file)."
      ],
      "what are the outputs of this tool": [
        "Success confirmation (source moved to destination) or an error explaining the cause (destination exists, permission, or outside allowed root)."
      ],
      "which tools to call if this tool is not successful": [
        "list_directory (to inspect destination existence)",
        "get_file_info (to inspect source/destination metadata)",
        "read_text_file + write_file (copy-then-delete workflows as fallback)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "write_file (for copy/overwrite workflows)",
        "create_directory (to ensure destination parent exists)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use move_file for atomic moves/renames when destination does not exist. Use read_text_file -> write_file to copy contents when you need to overwrite an existing destination."
      ]
    },
    "search_files": {
      "description of the tool": "Recursively search for files and directories whose name or path contains a given substring. Case-insensitive partial matches. Supports excludePatterns to omit directories like node_modules, build caches, etc. Only searches within allowed roots.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: starting path for the recursive search (must be inside an allowed root).",
        "pattern (string) [required]: substring to match (case-insensitive, partial match; not a regex).",
        "excludePatterns (array[string]) [optional]: list of substrings/globs to exclude (defaults to [])."
      ],
      "which other tools are commonly used with this tool": [
        "list_allowed_directories",
        "list_directory",
        "directory_tree",
        "read_text_file",
        "get_file_info"
      ],
      "what kinds of queries are best for this tool": [
        "Finding files when you don't know exact paths or filenames.",
        "Case-insensitive partial name matches and excluding common build/cache folders (.git, node_modules, Pods, temp).",
        "Locating filenames with version strings or substrings like 'SOP', 'CHANGELOG', '.pptx', etc."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Searching file contents (this is name/path-based only).",
        "Complex regex or content-aware searches (pattern is substring-based).",
        "Searching outside allowed roots."
      ],
      "what are the outputs of this tool": [
        "List/array of full file/directory paths that match the pattern (or an empty list if none)."
      ],
      "which tools to call if this tool is not successful": [
        "directory_tree (get full structure if search misses expected matches)",
        "list_directory (inspect a specific directory)",
        "list_allowed_directories (confirm allowed roots)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "directory_tree",
        "list_directory"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use search_files for pattern-based name lookups. Use directory_tree when you need the entire recursive structure. Use list_directory for single-directory checks."
      ]
    },
    "get_file_info": {
      "description of the tool": "Retrieve detailed metadata about a file or directory: size (bytes), creation/modification times, permissions, and type (file/directory). Only works inside allowed root directories.",
      "what is a description of the arguments of the tool": [
        "path (string) [required]: file or directory path to inspect (must be inside an allowed root). Prefer absolute path under the allowed root."
      ],
      "which other tools are commonly used with this tool": [
        "list_directory_with_sizes",
        "read_text_file",
        "move_file",
        "list_allowed_directories",
        "search_files"
      ],
      "what kinds of queries are best for this tool": [
        "Getting a file's exact size in bytes and timestamps.",
        "Checking that a path exists and whether it is a file or directory.",
        "Confirming permission bits before actions like moving or editing."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Reading file contents (use read_text_file/read_multiple_files).",
        "Modifying files (use edit_file or write_file).",
        "Accessing outside allowed roots (will return access denied)."
      ],
      "what are the outputs of this tool": [
        "Structured metadata (size in bytes, created/modified/access times, permissions, isFile/isDirectory) or an error if not found or access denied."
      ],
      "which tools to call if this tool is not successful": [
        "list_allowed_directories",
        "list_directory (to confirm presence at parent path)",
        "read_text_file (if you suspect path formatting issues)"
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "list_directory_with_sizes (for aggregated per-directory size view)"
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Use get_file_info for single-file full metadata. Use list_directory_with_sizes to inspect many items and combined sizes at once."
      ]
    },
    "list_allowed_directories": {
      "description of the tool": "Return the list of root directories the environment is allowed to access (for example /workspace). Always call this before other filesystem operations to avoid access-denied errors.",
      "what is a description of the arguments of the tool": [
        "No arguments."
      ],
      "which other tools are commonly used with this tool": [
        "search_files",
        "read_text_file",
        "write_file",
        "create_directory",
        "list_directory",
        "get_file_info"
      ],
      "what kinds of queries are best for this tool": [
        "Confirm which root paths (e.g. /workspace) are available before making filesystem calls.",
        "Diagnose access-denied errors by checking permitted roots."
      ],
      "what kinds of queries cannot be satisfied with this tool": [
        "Reading file contents, listing files, or modifying files.",
        "Providing per-file metadata or recursive listings."
      ],
      "what are the outputs of this tool": [
        "Array/list of allowed root directory paths (strings) or an error if the environment restricts the call."
      ],
      "which tools to call if this tool is not successful": [
        "Report the error to the user/environment administrator (no internal fallback)."
      ],
      "what other tools (if any) offer similar functionality to this tool": [
        "None (this is authoritative for allowed roots)."
      ],
      "when to use other similar tools (if any) compared to this tool": [
        "Call this first when unsure about environment access or after encountering access-denied errors."
      ]
    }
  }
}